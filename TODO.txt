# TODOs

 * bessere Status URLs:
   - GET /api/status/eventstore
   - GET /api/status/personoffice
   - GET /api/status/hangtagoffice

 * einheitlichere Detail URL:
   - GET /api/person/:id/detail

 * Erste Gehversuche Hangtags Controller
   - POST /api/hangtag/create
   - POST /api/hangtag/clone
   - GET /api/hangtag/list
   - GET /api/hangtag/:id/detail
   - POST /api/hangtag/:id/enter_content
   - POST /api/hangtag/:id/add_rendering
   - POST /api/hangtag/:id/accept_approval
   - POST /api/hangtag/:id/reject_approval

 * EventStore
   - an JournalWriter: Evelope-Objekte weiter geben
   - von JournalReader: Envelope-Objekte erhalten
   - EventSerializer: Umgang mit Types verbessern (nicht mehr im JSON)
   - EventSerializer: Assemblies übergebbar machen   

 * JournalReader/JournalWriter
   - PostgreSQL/sqlite Implementierung
   - als Proof-Of-Concept
   
---

Beispiel Umsetzung

1) Registrier Prozess

 * PersonOffice : Office
   - nimmt alle Kommandos entgegen
   - RegisterPerson -> PersonRegistrator
   - ConfirmEmail -> PersonActivator
   - ActivatePerson -> PersonActivator
   - sonstige Kommandos -> Person (ignoriert wenn noch nicht aktiviert)

 * PersonRegistrator : DurableActor (?)
   - zählt Id hoch
   - legt neue (unbestägigte, unaktivierte) Person mit letzter Id an

 * PersonActivator : DurableActor (Process Manager)
   - bekommt alle neu angelegten Personen
   - sendet regelmäßig Mails aus (bis zu 3)
   - erhält Email-Bestätigung und Freischaltung

 * Person : DurableActor&lt;&gt; (Aggregate root)
   - speichert alle Daten
   - erlaubt hinzufügen/entfernen von Sprachen
   - TODO: was passiert wenn Kommando kommt aber noch nicht aktiviert?

 * PersonList : DurableActor (View)
   - Liste aller aktiven Personen mit deren wichtigsten Merkmalen


2) Hangtags Prozess

 * HangtagOffice : Office
   - nimmt alle Kommandos entgegen
   - CreateHangtag -> HangtagCreator

 * HangtagCreator : DurableActor (?)
   - zählt Id hoch
   - legt neuen Hangtag mit letzter Id an

 * Hangtag : DurableActor&lt;&gt; (Aggregate root)
   - enthält Detail-Angaben für jeden Hangtag

 * HangtagSupervisor : DurableActor (Process Manager)
   - beobachtet alle Aktivitäten
   - fordert Rendering (evtl. wiederholt) an
   - meldet Zustände (evtl. wiederholt) per Mail
   - TODO: evtl. Trennung in mehrere Aktoren.

 * HangtagList : DurableActor (View)
   - Liste aller aktiven Hangtags mit deren wichtigsten Merkmalen


---

Workflow Aufbau

 * mehrere Formulare zusammen gesetzt
 * Combi-Daten als 1..n Teile einer Struktur (geordnet)
 * pro Teil der Struktur -> 1 Command erzeugen
 * Commands der Reihe nach abarbeiten (erster NACK stoppt)
 

Hangtag Commands derzeit

 * enter_technical_information
 * change_material
 * enter_suppliers
 * enter_content
 * review_content
 * enter_render_options
 * enter_translation -- mehrere Varianten je nach Recht
 * approve
 * add_accounting_info
 * add_comment
 * move_to_step -- darin steckt viel Logik


Umsetzung exemplarisch

 * enter_technical_information
 * change_material
 * enter_content
 * approve (enthält move_to_step)
 * add_accounting_info
 * move_to_step


Workflow Steps vereinfacht:

 * 220-Technical_Info == enter_technical, change_material, move_to_step
 * 223-Content = enter_content, move_to_step
 * 240-Manual = add_accounting_info, move_to_step
 * 250-Render 
 * 260-Quality = add_accounting_info, move_to_step
 * 270-Approval = approve 
 * 293-Drop = move_to_step
 * 299-Finish = move_to_step


---


zusätzliche Metadaten bei Event Storage

 * EventSource (Erzeuger des Events)
   == Sender
 * Correlation-Id: durchgängiger Pfad bei allen Messages eines "strangs"
   == Id des DurableActors, z.B. "person-4711", "hangtag-13"
 * Message-Id: numerische Id
 * Causation-Id: Grund für diese Nachricht
   == Message-Id der Nachricht, auf die ich geantwortet habe

https://groups.google.com/forum/#!searchin/dddcqrs/Correlation$20and$20Causation%7Csort:relevance/dddcqrs/qGYC6qZEqOI/LhQup9v7EwAJ